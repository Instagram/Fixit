name: Build
on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:

jobs:
# Build the docs
  docs:
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - uses: actions/cache@v2
      id: cache
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('requirements.txt', 'requirements-dev.txt', 'setup.py') }}
    - name: Install Dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        pip install --upgrade --upgrade-strategy eager build -r requirements.txt -r requirements-dev.txt
    - run: pip install -e .
    - uses: ts-graphviz/setup-graphviz@v1
    - run: sphinx-build docs/source/ docs/build/
    - name: Archive Docs
      uses: actions/upload-artifact@v2
      with:
        name: fixit-docs
        path: docs/build

# Run fixit
  fixit:
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8, 3.9, "3.10"]
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/cache@v2
      id: cache
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('requirements.txt', 'requirements-dev.txt', 'setup.py') }}
    - name: Install Dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        pip install --upgrade --upgrade-strategy eager build -r requirements.txt -r requirements-dev.txt
    - run: python -VV
    - run: python -m fixit.cli.run_rules fixit

# Run unittests
  test:
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8, 3.9, "3.10"]
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/cache@v2
      id: cache
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('requirements.txt', 'requirements-dev.txt', 'setup.py') }}
    - name: Install Dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        pip install --upgrade --upgrade-strategy eager build -r requirements.txt -r requirements-dev.txt
    - name: Run Tests
      run: python setup.py test

# Run linters
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - uses: actions/cache@v2
      id: cache
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('requirements.txt', 'requirements-dev.txt', 'setup.py') }}
    - name: Install Dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        pip install --upgrade --upgrade-strategy eager build -r requirements.txt -r requirements-dev.txt
    - run: flake8
    - run: ufmt check .

# Run pyre typechecker
  typecheck:
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - uses: actions/cache@v2
      id: cache
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('requirements.txt', 'requirements-dev.txt', 'setup.py') }}
    - name: Install Dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        pip install --upgrade --upgrade-strategy eager build -r requirements.txt -r requirements-dev.txt
    - run: pyre --version
    - run: pyre -n check

# Upload test coverage
  coverage:
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - uses: actions/cache@v2
      id: cache
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('requirements.txt', 'requirements-dev.txt', 'setup.py') }}
    - name: Install Dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        pip install --upgrade --upgrade-strategy eager build -r requirements.txt -r requirements-dev.txt
    - name: Generate Coverage
      run: |
        coverage run setup.py test
        coverage xml -i
    - uses: codecov/codecov-action@v2
      with:
        files: coverage.xml
        fail_ci_if_error: true
        verbose: true
    - name: Archive Coverage
      uses: actions/upload-artifact@v2
      with:
        name: coverage
        path: coverage.xml

# Build python package
  build:
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - uses: actions/cache@v2
      id: cache
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('requirements.txt', 'requirements-dev.txt', 'setup.py') }}
    - name: Install Dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        pip install --upgrade --upgrade-strategy eager build -r requirements.txt -r requirements-dev.txt
    - name: Disable scmtools local scheme
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      run: >-
        echo FIXIT_NO_LOCAL_SCHEME=1 >> $GITHUB_ENV
    - name: Build a binary wheel and a source tarball
      run: >-
        python -m
        build
        --sdist
        --wheel
        --outdir dist/
    - if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      name: Publish distribution ðŸ“¦ to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
